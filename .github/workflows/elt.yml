name: LMU Baseball ETL

on:
  workflow_dispatch:        # allows manual "Run workflow"
  schedule:
    - cron: "10 13 * * 1-6" # Mon-Sat at 06:10 PT (13:10 UTC). Adjust as you like.

# Prevent overlapping runs if one is still going
concurrency:
  group: lmu-baseball-etl
  cancel-in-progress: false

jobs:
  run-etl:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # Google Sheet inputs
      GSHEET_ID: ${{ secrets.GSHEET_ID }}
      GSHEET_TAB_NAME: ${{ secrets.GSHEET_TAB_NAME }}
      GSHEET_GID: ${{ secrets.GSHEET_GID }} # optional; fine if blank

      # MySQL creds
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DB: ${{ secrets.MYSQL_DB }}

      # Target table (can be overridden in repo-level secret if you want)
      RAW_TABLE: ${{ secrets.RAW_TABLE }}

      # Where we’ll write the service account JSON file on the runner
      GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ runner.temp }}/gcreds.json

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Write the Google service account JSON (stored as a secret) to a temp file
      - name: Write Google creds file
        if: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != '' }}
        run: |
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}' > "${GOOGLE_APPLICATION_CREDENTIALS_JSON}"
          # minimal sanity check without printing the contents
          python - <<'PY'
import json, os, sys
p = os.environ["GOOGLE_APPLICATION_CREDENTIALS_JSON"]
with open(p, "r", encoding="utf-8") as f:
    j = json.load(f)
print("Google SA email:", j.get("client_email","<missing>"))
PY

      # Optional: mask secrets in logs if any command echoes env by mistake
      - name: Mask secrets defensively
        run: |
          echo "::add-mask::${{ secrets.MYSQL_PASSWORD }}"

      # Run the ETL
      - name: Run Google Sheets → MySQL load
        run: |
          python etl/google_sheets_extract_load_raw.py

      # Optional: lightweight post-run check (will not print sensitive data)
      - name: Row count check (optional)
        env:
          # Build a client-only command using Python/pymysql (no SQL shown in logs)
          _SQL: "SELECT COUNT(*) FROM ${RAW_TABLE};"
        run: |
          python - <<'PY'
import os, pymysql
conn = pymysql.connect(
    host=os.getenv("MYSQL_HOST"),
    user=os.getenv("MYSQL_USER"),
    password=os.getenv("MYSQL_PASSWORD"),
    database=os.getenv("MYSQL_DB"),
    port=3306,
    connect_timeout=10,
)
with conn.cursor() as cur:
    cur.execute(os.environ["_SQL"])
    print("Rows now in table:", cur.fetchone()[0])
conn.close()
PY

