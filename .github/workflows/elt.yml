---
name: LMU Baseball ETL

on:
  workflow_dispatch: {}          # manual trigger
  schedule:
    - cron: '10 13 * * 1-6'      # Mon–Sat 13:10 UTC (06:10 PT)

concurrency:
  group: lmu-baseball-etl
  cancel-in-progress: false

jobs:
  run-etl:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Write the Google service account JSON from a secret to a temp file
      - name: Write Google creds file
        if: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != '' }}
        run: |
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}' > "$RUNNER_TEMP/gcreds.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS_JSON=$RUNNER_TEMP/gcreds.json" >> "$GITHUB_ENV"

      # Mask the DB password in logs (defense in depth)
      - name: Mask MySQL password
        if: ${{ secrets.MYSQL_PASSWORD != '' }}
        run: echo "::add-mask::${{ secrets.MYSQL_PASSWORD }}"

      # Export runtime env vars for the ETL script
      - name: Export ETL env
        run: |
          {
            echo "GSHEET_ID=${{ secrets.GSHEET_ID }}"
            echo "GSHEET_TAB_NAME=${{ secrets.GSHEET_TAB_NAME }}"
            echo "GSHEET_GID=${{ secrets.GSHEET_GID }}"
            echo "RAW_TABLE=${{ secrets.RAW_TABLE }}"
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
            echo "MYSQL_DB=${{ secrets.MYSQL_DB }}"
          } >> "$GITHUB_ENV"

      - name: Run ETL (Google Sheets → MySQL)
        run: python etl/google_sheets_extract_load_raw.py

      # Optional: sanity check row count (quiet; no SQL printed)
      - name: Row count check (optional)
        if: ${{ always() }}
        env:
          SQL_TABLE: ${{ secrets.RAW_TABLE }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
        run: |
          python - <<'PY'
          import os, pymysql
          host = os.environ["MYSQL_HOST"]
          user = os.environ["MYSQL_USER"]
          pw   = os.environ["MYSQL_PASSWORD"]
          db   = os.environ["MYSQL_DB"]
          tbl  = os.environ.get("SQL_TABLE", "raw_cauldron_scoreboard")
          try:
              conn = pymysql.connect(host=host, user=user, password=pw, database=db, port=3306)
              with conn.cursor() as cur:
                  cur.execute(f"SELECT COUNT(*) FROM `{tbl}`")
                  print("Rows in", tbl, ":", cur.fetchone()[0])
              conn.close()
          except Exception as e:
              print("Row count check skipped:", e)
          PY
